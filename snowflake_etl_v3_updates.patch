--- snowflake_etl.sh.old
+++ snowflake_etl.sh
@@ -1,7 +1,7 @@
 #!/bin/bash
 
 # Snowflake ETL Pipeline Manager - Unified Wrapper Script
-# Version: 2.7.0 - Dynamic UI sizing for full content visibility
+# Version: 3.0.0 - Uses new unified CLI (python -m snowflake_etl)
 # Description: Interactive menu system for all Snowflake ETL operations
 
 set -euo pipefail
@@ -13,7 +13,7 @@ set -euo pipefail
 
 SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
 SCRIPT_NAME="$(basename "$0")"
-VERSION="2.10.4"
+VERSION="3.0.0"
 
 # State management directories
 STATE_DIR="${SCRIPT_DIR}/.etl_state"
@@ -1278,7 +1278,7 @@ load_data_interactive_browser() {
     show_progress "Loading selected TSV files..."
     
     # Launch the file browser
-    if python3 tsv_file_browser.py --start-dir "${BASE_PATH:-$(pwd)}" \
+    if python3 -m snowflake_etl.ui.file_browser --start-dir "${BASE_PATH:-$(pwd)}" \
         --config "$CONFIG_FILE" \
         --output "$tmp_file" 2>/dev/null; then
         
@@ -1413,7 +1413,11 @@ menu_validate_data() {
         
         show_progress "Starting validation job..."
         
-        local cmd="python3 tsv_loader.py --config \"$CONFIG_FILE\" --validate-only"
+        # Use new CLI for validation
+        local cmd="python3 -m snowflake_etl --config \"$CONFIG_FILE\" validate"
+        cmd="$cmd --table \"$table\""
+        cmd="$cmd --date-column \"recordDate\""
+        
         if [[ -n "$month" ]]; then
             cmd="$cmd --month \"$month\""
             job_name="validate_${table}_${month}"
@@ -1507,11 +1511,17 @@ check_duplicates() {
                 
                 # Run duplicate check with appropriate date range
                 if [[ -n "$date_start" ]] && [[ -n "$date_end" ]]; then
-                    python3 check_duplicates_interactive.py "$CONFIG_FILE" "$table" "$key_columns" "$date_start" "$date_end"
+                    python3 -m snowflake_etl --config "$CONFIG_FILE" check-duplicates \
+                        --table "$table" \
+                        --key-columns "$key_columns" \
+                        --start-date "$date_start" \
+                        --end-date "$date_end"
                 else
                     # Check all data
                     echo "Checking all data in table (no date filter)..."
-                    python3 check_duplicates_interactive.py "$CONFIG_FILE" "$table" "$key_columns" "$date_start" "$date_end"
+                    python3 -m snowflake_etl --config "$CONFIG_FILE" check-duplicates \
+                        --table "$table" \
+                        --key-columns "$key_columns"
                 fi
                 ;;
             *)
@@ -1615,7 +1625,10 @@ compare_files() {
             fi
             
             show_progress "Comparing files..."
-            python3 compare_tsv_files.py $use_quick "$good_file" "$bad_file"
+            python3 -m snowflake_etl --config "$CONFIG_FILE" compare \
+                --file1 "$good_file" \
+                --file2 "$bad_file" \
+                $use_quick
             show_message "Comparison Complete" "File comparison results shown above"
             ;;
         *)
@@ -1669,7 +1682,7 @@ validate_tsv_files() {
             if [[ -f "$file" ]]; then
                 echo "Validating: $(basename "$file")"
                 echo "----------------------------------------"
-                python3 validate_tsv_file.py "$file"
+                python3 -m snowflake_etl.validators.file_validator --file "$file"
                 echo ""
             else
                 echo "File not found: $file"
@@ -1711,11 +1724,11 @@ check_table_info() {
                 echo "Checking table: $table"
                 echo "----------------------------------------"
                 if [[ "$run_mode" == "foreground" ]]; then
-                    python3 check_snowflake_table.py "$CONFIG_FILE" "$table"
+                    python3 -m snowflake_etl.tools.table_inspector --config "$CONFIG_FILE" --table "$table"
                 else
                     local job_name="check_table_${table}_$(date +%Y%m%d_%H%M%S)"
                     start_job "$job_name" \
-                        python3 check_snowflake_table.py "$CONFIG_FILE" "$table"
+                        python3 -m snowflake_etl.tools.table_inspector --config "$CONFIG_FILE" --table "$table"
                     
                     show_message "Job Started" "Checking table $table in background.\nJob: $job_name"
                 fi
@@ -1757,7 +1770,10 @@ generate_table_report() {
     
     # Build command
-    local cmd="python3 generate_table_report.py --config-dir config"
+    local cmd="python3 -m snowflake_etl --config \"$CONFIG_FILE\" report"
+    cmd="$cmd --output-format both"
+    cmd="$cmd --max-workers 4"
+    
     if [[ -n "$config_filter" ]]; then
         cmd="$cmd --config-filter \"$config_filter\""
     fi
@@ -1797,7 +1813,7 @@ diagnose_copy_errors() {
         
         if [[ -f "$log_file" ]]; then
             echo "Analyzing: $log_file"
-            local output=$(python3 diagnose_copy_error.py "$log_file" 2>&1 | head -100)
+            local output=$(python3 -m snowflake_etl.tools.error_diagnostics --log "$log_file" 2>&1 | head -100)
             
             if [[ -z "$output" ]]; then
                 echo "No errors found in this log file."
@@ -1878,8 +1894,10 @@ clean_stage_files() {
                 return 1
             fi
             
-            local output=$(python3 check_stage_and_performance.py "$CONFIG_FILE" 2>&1 | grep -E "(Found|Total|Would)" | head -20)
-            show_message "Stage Status" "$output\n\nRun 'python3 check_stage_and_performance.py $CONFIG_FILE' to clean interactively."
+            local output=$(python3 -m snowflake_etl.tools.stage_manager --config "$CONFIG_FILE" --check 2>&1 | grep -E "(Found|Total|Would)" | head -20)
+            show_message "Stage Status" "$output\n\nRun 'python3 -m snowflake_etl.tools.stage_manager --config $CONFIG_FILE --clean-interactive' to clean interactively."
             ;;
         *)
             return 1